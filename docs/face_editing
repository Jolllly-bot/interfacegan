{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"face_editing","provenance":[{"file_id":"https://github.com/genforce/interfacegan/blob/master/docs/InterFaceGAN.ipynb","timestamp":1657943433597}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"qJDJLE3v0HNr"},"source":["# Fetch Codebase and Models"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/"],"metadata":{"id":"cAOsnDKzIcFa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657945902320,"user_tz":-480,"elapsed":18955,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"820f5fd0-bdaf-446f-9dc9-a8b38d5f7cb1"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive\n"]}]},{"cell_type":"code","metadata":{"id":"JqiWKjpFa0ov","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657945918214,"user_tz":-480,"elapsed":13570,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"315aa461-4714-42d0-bfb2-655a42e35504"},"source":["import os\n","CODE_DIR = 'interfacegan'\n","!git clone https://github.com/Jolllly-bot/interfacegan.git $CODE_DIR\n","os.chdir(f'./{CODE_DIR}')\n","!wget https://www.dropbox.com/s/t74z87pk3cf8ny7/pggan_celebahq.pth?dl=1 -O models/pretrain/pggan_celebahq.pth --quiet\n","!wget https://www.dropbox.com/s/nmo2g3u0qt7x70m/stylegan_celebahq.pth?dl=1 -O models/pretrain/stylegan_celebahq.pth --quiet\n","!wget https://www.dropbox.com/s/qyv37eaobnow7fu/stylegan_ffhq.pth?dl=1 -O models/pretrain/stylegan_ffhq.pth --quiet"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'interfacegan'...\n","remote: Enumerating objects: 616, done.\u001b[K\n","remote: Counting objects: 100% (127/127), done.\u001b[K\n","remote: Compressing objects: 100% (35/35), done.\u001b[K\n","remote: Total 616 (delta 95), reused 92 (delta 92), pack-reused 489\u001b[K\n","Receiving objects: 100% (616/616), 13.79 MiB | 13.90 MiB/s, done.\n","Resolving deltas: 100% (205/205), done.\n"]}]},{"cell_type":"code","source":["!git s"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C_FUkwQMRxzB","executionInfo":{"status":"ok","timestamp":1657946834801,"user_tz":-480,"elapsed":425,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"dd5af345-c09d-4f56-b2c1-5030c24e23c0"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["On branch master\n","Your branch is up to date with 'origin/master'.\n","\n","Changes to be committed:\n","  (use \"git reset HEAD <file>...\" to unstage)\n","\n","\t\u001b[32mrenamed:    ../face_editing.ipynb -> ../docs/face_editing.ipynb\u001b[m\n","\n","Changes not staged for commit:\n","  (use \"git add/rm <file>...\" to update what will be committed)\n","  (use \"git checkout -- <file>...\" to discard changes in working directory)\n","\n","\t\u001b[31mdeleted:    ../docs/face_editing.ipynb\u001b[m\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"hQ_IXBZr8YcJ"},"source":["# Define Utility Functions"]},{"cell_type":"code","metadata":{"id":"ijKTlG5GeTd3","executionInfo":{"status":"ok","timestamp":1657946583291,"user_tz":-480,"elapsed":396,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}}},"source":["import os.path\n","import io\n","import IPython.display\n","import numpy as np\n","import cv2\n","import PIL.Image\n","\n","import torch\n","\n","from models.model_settings import MODEL_POOL\n","from models.pggan_generator import PGGANGenerator\n","from models.stylegan_generator import StyleGANGenerator\n","from utils.manipulator import linear_interpolate\n","\n","\n","def build_generator(model_name):\n","  \"\"\"Builds the generator by model name.\"\"\"\n","  gan_type = MODEL_POOL[model_name]['gan_type']\n","  if gan_type == 'pggan':\n","    generator = PGGANGenerator(model_name)\n","  elif gan_type == 'stylegan':\n","    generator = StyleGANGenerator(model_name)\n","  return generator\n","\n","\n","def sample_codes(generator, num, latent_space_type='Z', seed=0):\n","  \"\"\"Samples latent codes randomly.\"\"\"\n","  np.random.seed(seed)\n","  codes = generator.easy_sample(num)\n","  if generator.gan_type == 'stylegan' and latent_space_type == 'W':\n","    codes = torch.from_numpy(codes).type(torch.FloatTensor).to(generator.run_device)\n","    codes = generator.get_value(generator.model.mapping(codes))\n","  return codes\n","\n","\n","def imshow(images, col, viz_size=256):\n","  \"\"\"Shows images in one figure.\"\"\"\n","  num, height, width, channels = images.shape\n","  assert num % col == 0\n","  row = num // col\n","\n","  fused_image = np.zeros((viz_size * row, viz_size * col, channels), dtype=np.uint8)\n","\n","  for idx, image in enumerate(images):\n","    i, j = divmod(idx, col)\n","    y = i * viz_size\n","    x = j * viz_size\n","    if height != viz_size or width != viz_size:\n","      image = cv2.resize(image, (viz_size, viz_size))\n","    fused_image[y:y + viz_size, x:x + viz_size] = image\n","\n","  fused_image = np.asarray(fused_image, dtype=np.uint8)\n","  data = io.BytesIO()\n","  PIL.Image.fromarray(fused_image).save(data, 'jpeg')\n","  im_data = data.getvalue()\n","  disp = IPython.display.display(IPython.display.Image(im_data))\n","  PIL.Image.fromarray(fused_image).save(\"generated_images/output.jpg\")\n","  return disp"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q7gkmrVW8eR1"},"source":["# Select a Model"]},{"cell_type":"code","metadata":{"id":"NoWI4fPQ6Gnf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657946187844,"user_tz":-480,"elapsed":4407,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"22c01316-8d1c-4baa-8614-39a23c756d4d"},"source":["#@title { display-mode: \"form\", run: \"auto\" }\n","model_name = \"stylegan_ffhq\" #@param ['pggan_celebahq','stylegan_celebahq', 'stylegan_ffhq']\n","latent_space_type = \"Z\" #@param ['Z', 'W']\n","\n","generator = build_generator(model_name)\n","\n","ATTRS = ['age', 'eyeglasses', 'gender', 'pose', 'smile']\n","boundaries = {}\n","for i, attr_name in enumerate(ATTRS):\n","  boundary_name = f'{model_name}_{attr_name}'\n","  if generator.gan_type == 'stylegan' and latent_space_type == 'W':\n","    boundaries[attr_name] = np.load(f'boundaries/{boundary_name}_w_boundary.npy')\n","  else:\n","    boundaries[attr_name] = np.load(f'boundaries/{boundary_name}_boundary.npy')"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[2022-07-16 04:36:23,749][INFO] Loading pytorch model from `models/pretrain/stylegan_ffhq.pth`.\n","[2022-07-16 04:36:24,103][INFO] Successfully loaded!\n","[2022-07-16 04:36:24,108][INFO]   `lod` of the loaded model is 0.0.\n"]}]},{"cell_type":"markdown","metadata":{"id":"zDStH1O5t1KC"},"source":["# Sample latent codes"]},{"cell_type":"code","metadata":{"id":"qlRGKZbJt9hA","colab":{"base_uri":"https://localhost:8080/","height":273},"executionInfo":{"status":"ok","timestamp":1657946590699,"user_tz":-480,"elapsed":14,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"cfb6fd2e-f100-4380-ca88-fc82f3b1af6b"},"source":["#@title { display-mode: \"form\", run: \"auto\" }\n","\n","num_samples = 1 #@param {type:\"slider\", min:1, max:8, step:1}\n","noise_seed = 0 #@param {type:\"slider\", min:0, max:1000, step:1}\n","\n","latent_codes = sample_codes(generator, num_samples, latent_space_type, noise_seed)\n","if generator.gan_type == 'stylegan' and latent_space_type == 'W':\n","  synthesis_kwargs = {'latent_space_type': 'W'}\n","else:\n","  synthesis_kwargs = {}\n","\n","images = generator.easy_synthesize(latent_codes, **synthesis_kwargs)['image']\n","imshow(images, col=num_samples)"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Image object>"],"image/jpeg":"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\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"MmRPN3xz8jCH"},"source":["# Edit facial attributes"]},{"cell_type":"code","metadata":{"id":"ccONBF60mVir","colab":{"base_uri":"https://localhost:8080/","height":273},"executionInfo":{"status":"ok","timestamp":1657946252363,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jolly He","userId":"12151962083368422774"}},"outputId":"ed072aa8-f9cb-4448-ba56-dd2595b16cca"},"source":["#@title { display-mode: \"form\", run: \"auto\" }\n","\n","age = -1.3 #@param {type:\"slider\", min:-3.0, max:3.0, step:0.1}\n","eyeglasses = 0.2 #@param {type:\"slider\", min:-2.9, max:3.0, step:0.1}\n","gender = 0.6 #@param {type:\"slider\", min:-3.0, max:3.0, step:0.1}\n","pose = -0.1 #@param {type:\"slider\", min:-3.0, max:3.0, step:0.1}\n","smile = -1 #@param {type:\"slider\", min:-3.0, max:3.0, step:0.1}\n","\n","new_codes = latent_codes.copy()\n","for i, attr_name in enumerate(ATTRS):\n","  new_codes += boundaries[attr_name] * eval(attr_name)\n","\n","new_images = generator.easy_synthesize(new_codes, **synthesis_kwargs)['image']\n","imshow(new_images, col=num_samples)"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Image object>"],"image/jpeg":"\n"},"metadata":{}}]},{"cell_type":"code","source":[""],"metadata":{"id":"r-XnQ_kcKKOk"},"execution_count":null,"outputs":[]}]}